name: Deploy to EC2

on:
  push:
    branches:
      - main # Adjust to your deployment branch

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Archive specific project components
      run: tar -czvf project.tar.gz ./backend ./frontend ./docker-compose.yml
      
    - name: Copy project to EC2
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: 22
        source: "project.tar.gz"
        target: "/home/${{ secrets.EC2_USER }}/deployment_directory/"

    - name: Cleanup, Install, and Deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: 22
        script: |
          # Debugging: List current directory contents
          echo "Listing /home/${{ secrets.EC2_USER }}/ contents before cleanup..."
          ls -lah /home/${{ secrets.EC2_USER }}/
          
          # Stop and remove all Docker containers
          docker ps -q | xargs -r docker stop
          docker ps -aq | xargs -r docker rm
          
          # Remove previous deployment directory
          rm -rf /home/${{ secrets.EC2_USER }}/deployment_directory/
          
          # Debugging: Confirm directory removal
          echo "Listing /home/${{ secrets.EC2_USER }}/ contents after cleanup..."
          ls -lah /home/${{ secrets.EC2_USER }}/
          
          # Extract the new deployment
          mkdir -p /home/${{ secrets.EC2_USER }}/deployment_directory/
          tar -xzvf /home/${{ secrets.EC2_USER }}/deployment_directory/project.tar.gz -C /home/${{ secrets.EC2_USER }}/deployment_directory/
          
          # Debugging: List deployment_directory contents after extraction
          echo "Listing /home/${{ secrets.EC2_USER }}/deployment_directory/ contents after extraction..."
          ls -lah /home/${{ secrets.EC2_USER }}/deployment_directory/
          
          # Navigate to the deployment directory
          cd /home/${{ secrets.EC2_USER }}/deployment_directory/
          
          # Check if Docker and Docker Compose are installed, install if not
          if ! command -v docker &> /dev/null
          then
              sudo apt-get update
              sudo apt-get install -y docker.io
          fi
          
          if ! command -v docker-compose &> /dev/null
          then
              sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
          fi
          
          # Debugging: Verify docker-compose.yml existence
          echo "Verifying docker-compose.yml presence..."
          if [ -f docker-compose.yml ]; then
              echo "docker-compose.yml found."
          else
              echo "docker-compose.yml NOT found."
          fi
          
          # Start the application with Docker Compose
          docker-compose up --build -d

          # List active Docker containers to verify successful deployment
          echo "Listing active Docker containers..."
          sudo docker ps
